% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AAAA.R
\docType{package}
\name{pmtables}
\alias{pmtables-package}
\alias{pmtables}
\title{pmtables: Tables for Pharmacometrics.}
\description{
Summarize data sets and create publication-quality tables for
inclusion in 'tex' documents.
}
\section{Creating general tables}{

\itemize{
\item To create a table with a single function call, use \code{\link[=stable]{stable()}} for single
page tables and \code{\link[=stable_long]{stable_long()}} for longtable
\item Alternatively, use \code{\link[=st_new]{st_new()}} to create a s-table object and pipe to other
st-functions; see the documentation links in \code{\link[=stable]{stable()}} to discover these
functions; finally, create an stable object with \code{\link[=st_make]{st_make()}}
}
}

\section{Table data grooming and sanitization}{

\itemize{
\item The functions \code{\link[=tab_prime]{tab_prime()}} and \code{\link[=triage_data]{triage_data()}} are called to get the data
frame ready to be in tabular format (see \code{\link[=make_tabular]{make_tabular()}}
\item The function \code{\link[=tab_escape]{tab_escape()}} is used to escape \verb{\%} and \verb{_} in the table
(sanitization); use \code{options(pmtables.escape = ...)} to change the set of
escape characters or set that option to \code{NULL} to prevent any sanitization
\item Any unit of data that has a character escaped with double backslash
(\verb{\\\\}) or that contains a math expression with two \code{$} will not be
sanitized
\item The function \code{\link[=tab_escape]{tab_escape()}} also performs the following substitutions:
\itemize{
\item change \code{~} to \verb{$\\\\sim$}
\item change \code{>} to \verb{$>$}
\item change \code{<} to \verb{$<$}
}
}
}

\section{Summarizing and creating tables}{

\itemize{
\item Use \code{\link[=pt_cont_wide]{pt_cont_wide()}} to create continuous data summary in wide format
\item Use \code{\link[=pt_cont_long]{pt_cont_long()}} to create continuous data summary in long format
\item Use \code{\link[=pt_cat_wide]{pt_cat_wide()}} to create discrete data summaries in wide format
\item Use \code{\link[=pt_cat_long]{pt_cat_long()}} to create discrete data summaries in long format
\item Use \code{\link[=pt_data_inventory]{pt_data_inventory()}} to create a table summarizing observations and
individuals in a data set
\item All of the above functions return an object with class \code{pmtable}, which is
a list; you can access the summarized data by looking at the \code{data} slot;
otherwise, pass the \code{pmtable} object to \code{\link[=stable]{stable()}} or \code{\link[=as_stable]{as_stable()}} in
order to create the table.  See \link{class-pmtable} for details around this
object
\item You can configure the digits in these summaries with \code{\link[=new_digits]{new_digits()}}
}
}

\section{Helper functions for working with data frames}{

\itemize{
\item Make text bold with \code{\link[=tex_bold]{tex_bold()}} or italics with \code{\link[=tex_it]{tex_it()}}
\item Clear repeated values in a column with \code{\link[=clear_grouped_values]{clear_grouped_values()}} and
\code{\link[=tab_clear_reps]{tab_clear_reps()}}
\item Use \code{\link[=tab_edit]{tab_edit()}} to do find / replace on your data frame
\item Use \code{\link[=df_grep_rows]{df_grep_rows()}} and \code{\link[=df_grepl_rows]{df_grepl_rows()}} to find rows that match a given
pattern
\item Use \code{\link[=sig]{sig()}} or \code{\link[=digit1]{digit1()}} to control the number of digits that are
displayed; both these functions return character
}
}

\section{Functions to align columns}{

\itemize{
\item When you want latex to figure out column widths: \code{\link[=cols_left]{cols_left()}},
\code{\link[=cols_right]{cols_right()}}, \code{\link[=cols_center]{cols_center()}}, \code{\link[=cols_align]{cols_align()}}
\item When you want to fix the width of a specific column in the table:
\code{\link[=col_ragged]{col_ragged()}}, \code{\link[=col_fixed]{col_fixed()}}
}
}

\section{Functions to modify or configure a table}{

\itemize{
\item Alter column names: \code{\link[=tab_cols]{tab_cols()}}
\item Partition a table into panels: \code{\link[=as.panel]{as.panel()}} and \code{\link[=rowpanel]{rowpanel()}}
\item Create groups of columns with column spanners: \code{\link[=colgroup]{colgroup()}} and
\code{\link[=colsplit]{colsplit()}}
\item Configure row spacing, column spacing, or font size: \code{\link[=tab_size]{tab_size()}}
\item Configure the appearance of table notes: \code{\link[=noteconf]{noteconf()}}
\item Identify rows that are "summary" rows: \code{\link[=sumrow]{sumrow()}}; these rows can get
automatically styled with a label (optionally in bold font) and a
horizontal line above
}
}

\section{Preview tables}{

\itemize{
\item Use \code{\link[=st2viewer]{st2viewer()}} to send s-table output to \code{\link[texPreview:tex_preview]{texPreview::tex_preview()}}
\item Use \code{\link[=st2article]{st2article()}} or \code{\link[=st2report]{st2report()}} to render several tables in
a stand-alone tex document rendered directly by \code{pdflatex} (no involvement
of \code{Rmarkdown} or \code{pandoc}); this requires \code{pdflatex} to be installed and
in your \code{PATH}.
\item Use \code{\link[=st2doc]{st2doc()}} to render a pdf file with one or more tables using pandoc;
in general, use \code{\link[=st2article]{st2article()}} instead
\item Pipe tables to \code{\link[=st_asis]{st_asis()}} to render a table in line while knitting an
Rmd document
\item Use \code{\link[=st_wrap]{st_wrap()}}  to wrap s-table output in a \code{table}
environment and optionally send the output to \code{\link[=stdout]{stdout()}}; this is helpful
when rendering tables in Rmarkdown documents.  There is an \code{\link[=st_wrap]{st_wrap()}}
method for longtables that won't add the table environment.
\item Use \code{\link[=as_lscape]{as_lscape()}} to mark \code{\link[=stable]{stable()}} or \code{\link[=stable_long]{stable_long()}} output for display
in landscape environment
}
}

\section{Save s-tables}{

\itemize{
\item Use \code{\link[=stable_save]{stable_save()}} to write an \code{stable} or \code{stable_long} object to file
\item Note that there is a \code{dir} argument to that function that lets you
route the table to a specific directory; \code{dir} defaults to the
\code{pmtables.dir} option, so setting \code{options(pmtables.dir = "../deliv/table")}
will route the table to that directory without requiring additional input
}
}

\section{Latex / markdown information}{


The following latex packages are required in your \code{Rmd} or \code{latex} document:
\itemize{
\item \code{threeparttable}
\item \code{array}
\item \code{booktabs}
\item \code{pdflscape}
\item \code{longtable} (only when long tables are in the document)
\item \code{float} (mainly if you want to use \code{H} placement in your Rmd output)
}

In \code{Rmd}, include these as \code{extra_dependencies}. Or try using
\code{\link[=st_use_knit_deps]{st_use_knit_deps()}} to include these packages via \code{\link[knitr:knit_meta]{knitr::knit_meta_add()}};
this is \strong{only} when you are including a table in a knit \code{Rmd} document.

You may also want to include this package:
\itemize{
\item \code{mathdesign} with option \code{utopia}
}

The tables are generated with defaults that look sensible when the table is
rendered with single spacing.  If you are working in a 1.5 spaced
environment, the table may look roomy.  In that case, load the \code{setspace}
package and switch to \code{singlespacing} prior to sourcing the table.

If you render tables in an \code{Rmarkdown} document with processing by \code{pandoc},
\code{pandoc} may make mistakes when parsing the \code{latex} code.  To keep \code{pandoc}
from making parsing errors, use \code{latex} code fence.  This formatting can
be added to your table with the \code{\link[=st_latex]{st_latex()}} command.  You can see what the
fence looks like by running \code{st_latex("abc")}. Asserting that the code is
\code{latex} can also be accomplished with \code{\link[=pt_wrap]{pt_wrap()}} and using the
\code{context = "rmd"} option. See \code{\link[=st2article]{st2article()}} for instructions on
how to view a complete working \code{latex} example.
}

\section{Glossaries}{

\itemize{
\item Use \code{\link[=read_glossary]{read_glossary()}} to read abbreviations and definitions from a
file in \code{.tex} or \code{.yaml} format.
\item Use \code{\link[=as_glossary]{as_glossary()}} to create a glossary object in R.
\item Use \code{\link[=select_glossary]{select_glossary()}} to select specific labels from a glossary object.
\item Use \code{\link[=glossary_notes]{glossary_notes()}} to create table notes from a glossary object.
\item Use \code{\link[=st_notes_glo]{st_notes_glo()}} to create glossary notes from a glossary object
and attach to a table in a pipeline.
}
}

\section{Data sets}{

\itemize{
\item \link{analysis1} - a NMTRAN-style data set; the basis for most other
example data sets
\item \link{pmt_pk} - this is \link{analysis1}, but with only PK observation records
\item \link{pmt_obs} - this is \link{analysis1}, but with only observations
\item \link{pmt_first} - this is \link{analysis1} but with only the first record from
each individual
\item \link{pmt_summarized} - an example data set that has been summarized
}
}

\seealso{
Useful links:
\itemize{
  \item \url{https://metrumresearchgroup.github.io/pmtables}
  \item \url{https://github.com/metrumresearchgroup/pmtables}
  \item Report bugs at \url{https://github.com/metrumresearchgroup/pmtables/issues}
}

}
\author{
\strong{Maintainer}: Kyle Baron \email{kyleb@metrumrg.com}

Other contributors:
\itemize{
  \item Anna-Christina Nevison \email{annan@metrumrg.com} [contributor]
  \item Katherine Kay \email{katherinek@metrumrg.com} [contributor]
  \item Devin Pastoor \email{devin.pastoor@gmail.com} [contributor]
  \item Kyle Barrett \email{barrettk@metrumrg.com} [contributor]
}

}
